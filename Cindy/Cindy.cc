/*
 * Copyright (c) 1993-98 by	Michael O. Distler,
 *				Institut fuer Kernphysik,
 *				Johannes Gutenberg-Universitaet Mainz
 *
 * All rights reserved.
 *
 * $Header: /tmp/cvsroot/Cola/Cindy/Cindy.cc,v 4.15 2002-12-12 12:24:41 distler Exp $
 *
 * Main Part des Cindy++ Compilers
 */

static char copyright[] =
"@(#)Copyright (c) 1993-98 by Michael O. Distler, Institut fuer Kernphysik,\
 Johannes Gutenberg-Universitaet Mainz. All rights reserved.";

static char rcsid[] =
"@(#)$Id: Cindy.cc 2640 2015-04-01 14:03:00Z aqua $";

#define _DEFAULT_SOURCE 1
#define _POSIX_C_SOURCE 2
extern "C" {
#include <time.h>
#include <sys/param.h>
#ifdef m68kph
#define time_t _G_time_t
#endif
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
}
#include <string.h>
#include <unistd.h>
// #include <procbuf.h>
#include "CindyCompiler.h"

char *CTPTR = "ct";
char *CINDY = "cindy";

char	  *progname = "Cindy++";
int	   initLevel;
int	   initItems;
int	   outconf;
CindyCount count;

int	PrintStruct(char *out, char *incl, char *incdir, int dynamic,
		    char *exp, VPtr var);
int	PrintConf(std::ostream *fout, char *incl, char *incdir);
int	Srekursion(std::ostream *fout, TPtr typ, const char *nam,
		   const char *lnam, int lvl, const char *exp);
void	print_help(void);

int
main(int argc, char *argv[])
{
  char	*experiment, *cinput, *poutput, *soutput, *incdir, *cinclude;
  int	 opt;
  int dynamic = 0;

  if (*rcsid != '@') return(1);
  if (*copyright != '@') return(1);
  experiment = cinput = poutput = soutput = incdir = cinclude = NULL;
  outconf = 0;
  while (EOF != (opt = getopt(argc, argv, "C:de:i:n:p:s:xg:h?"))) {
    switch (opt) {
    case 'C':
      incdir = optarg;
      break;
    case 'd':
      dynamic = -1;
      break;
    case 'e':
      experiment = optarg;
      break;
    case 'i':
      cinput = optarg;
      break;
    case 'n':
      CTPTR = "ctn";
      CINDY = optarg;
      outconf++;
      break;
    case 'p':
      poutput = optarg;
      break;
    case 'g':
      cinclude = optarg;
      break;
    case 's':
      soutput = optarg;
      break;
    case 'x':
      CTPTR = "cx";
      CINDY = "cindyOut";
      outconf++;
      break;
    case 'h':
    case '?':
      print_help();
      return(0);
      break;
    default:
      perror(progname);
      print_help();
      return(errno);
      break;
    }
  }

  if (experiment == NULL) {
    std::cerr << progname
	      << ": name of the experiment must be specified."
	      << std::endl << std::endl;
    print_help();
    return(errno);
  }

  if (cinput == NULL) {
    cinput = new char[strlen(experiment)+3];
    strcpy(cinput, experiment);
    strcat(cinput, ".h");
  }

  char *cpp_command =
    new char[strlen(GNUCPP)+2*strlen(incdir)+strlen(cinput)+6];
  if (incdir)
    sprintf(cpp_command, GNUCPP " -I%s %s/%s", incdir, incdir, cinput);
  else
    sprintf(cpp_command, GNUCPP " %s", cinput);

  FILE *in = NULL;
  if ((in = popen(cpp_command, "r")) == NULL) {
    perror(progname);
    return(errno);
  }

  CindyCompiler cc(fileno(in));

  if (cc.yyparse()) {
    perror(progname);
    return(errno);
  }

  fclose(in);
  delete cpp_command;

  PrintVars(poutput,experiment,cc.Vars,progname);

  if (cinclude) cinput=cinclude;

  PrintStruct(soutput,cinput,incdir,dynamic,experiment,cc.Vars);

  return(0);
}

int
PrintStruct(char *out, char *incl, char *incdir, int dynamic, 
	    char *exp, VPtr var)
{
  std::ostream *fout = NULL;

  if (out == NULL) return 0;

  if (strcmp(out,"-")) {
    if ((fout = new std::ofstream(out)) == NULL) {
      perror(progname);
      exit(errno);
    }
  }
  else fout = &std::cout;

  while (var != NULL) {
    if (exp == NULL) break;
    if (!strcmp(var->name, exp)) break;
    var = var -> next;
  }

  if (var == NULL) {
    std::cerr << progname << ": " << exp << " not defined" << std::endl;
    exit(errno);
  }

  *fout << "/" << "/" << std::endl;
  *fout << "/" << "/ Copyright (c) 1993/94 by\tMichael O. Distler,"
	<< std::endl;
  *fout << "/" << "/\t\t\t\tInstitut fuer Kernphysik," << std::endl;
  *fout << "/" << "/\t\t\t\tJohannes Gutenberg-Universitaet Mainz"
	<< std::endl;
  *fout << "/" << "/" << std::endl;
  *fout << "/" << "/ All rights reserved." << std::endl;
  *fout << "/" << "/" << std::endl;
  *fout << "/" << "/ This code is generated by software. DO NOT EDIT."
	<< std::endl;
  *fout << "/" << "/" << std::endl << std::endl;

  *fout << "#include \"Cindy/Cindy++.h\"" << std::endl;
  *fout << "#include \"" << incl << "\"" << std::endl << std::endl;

  int configSize = 0;
  if (outconf) {
    time_t dt;
    time(&dt);
    char *cdt = ctime(&dt);
    cdt[strlen(cdt)-1] = 0;
    *fout << "/" << "/" << std::endl;
    *fout << "/" << "/\texperiment name und compile time" << std::endl;
    *fout << "/" << "/" << std::endl << std::endl;
    *fout << "char " << CINDY << "ConfDate[] =" << std::endl
	  << "\"" << exp << " - " << cdt << " (Cindy++)\\0\\0\\0\\0\\0\\0\";"
	  << std::endl << std::endl;
    configSize = PrintConf(fout,incl,incdir);
  }

  initLevel = 1;
  initItems = 0;
  count.reset();

  *fout << "/" << "/" << std::endl;
  *fout << "/" << "/\tevent tree configuration" << std::endl;
  *fout << "/" << "/" << std::endl << std::endl;
  *fout << "void " << CINDY << "TreeInit" << initLevel
    << "(CindyTree *" << CTPTR << ")" << std::endl << "{" << std::endl;
  Srekursion(fout, var->typ, var->name, var->name, 0, exp);
  *fout << "}\t/" << "/ end of void " << CINDY << "TreeInit" << initLevel
    << "(CindyTree *" << CTPTR << ")" << std::endl << std::endl;

  int maxlevel;
  for (maxlevel=0; count.get_level(maxlevel)>0;maxlevel++);

  if (!dynamic) {
    *fout << "CindyTree *" << CINDY << "TreeAlloc()" << std::endl
	  << "{" << std::endl;
    *fout << "  extern struct " << exp << " "<<exp <<";" << std::endl;
    *fout << "  return " << CINDY << "TreeAlloc(&"<<exp<<");" <<std::endl
	  << "}" << std::endl << std::endl;
  }

  *fout << "CindyTree *" << CINDY << "TreeAlloc(void *root)" 
	<< std::endl << "{" << std::endl;
  *fout << "  CindyTree *" << CTPTR << ";" << std::endl << std::endl;
  *fout << "  " << CTPTR << " = new CindyTree(" << maxlevel
	<< ");" << std::endl;
  while (maxlevel--)
    *fout << "  " << CTPTR << "->alloc(" << maxlevel
	  << "," << count.get_level(maxlevel) << ");" << std::endl;
  if (outconf)
    *fout << std::endl << "  " << CTPTR << "->setconf(" << CINDY << "ConfDate,"
	  << CINDY << "Configuration," << configSize << ");";
  *fout << std::endl << "  " << CTPTR << "->setroot((char *) root, sizeof(" 
        << exp << ")," << count.length() << ");" << std::endl << std::endl;
  for (int iL=1 ; iL <= initLevel ; iL++)
    *fout << "  " << CINDY << "TreeInit" << iL
	  << "(" << CTPTR << ");" << std::endl;
  *fout << std::endl << "  return " << CTPTR << ";" << std::endl;
  *fout << "}\t/" << "/ end of CindyTree *"
	<< CINDY << "TreeAlloc()" << std::endl;

  return(0);
}

int
Srekursion(std::ostream *fout, TPtr typ, const char *nam,
	   const char *lnam, int lvl, const char *exp)
{
  char name[256];
  Member *mem;
  int arr;

  if (typ->member == NULL) {
/*
 *  *fout << "// " << *typ->name << '\t' << lnam << std::endl;
 */
    *fout << "  " << CTPTR << "->add(" << lvl << ","
	  << count.get_level(lvl) << "," << count.get_level(lvl-1)-1
	  << ",\"" << nam 
	  << "\",&(((struct " << exp << " *)"<<CTPTR<<"->getroot())->" 
	  << (strstr(lnam,".")+1) << "));" << std::endl;
    if (++initItems >= 50) {
      *fout << "}\t/" << "/ end of void " << CINDY << "TreeInit" << initLevel++
	<< "(CindyTree *" << CTPTR << ")" << std::endl << std::endl;
      *fout << "void " << CINDY << "TreeInit" << initLevel
	<< "(CindyTree *" << CTPTR << ")" << std::endl << "{" << std::endl;
      initItems = 0;
    }
    count.check(lnam);
    count.inc(lvl);
    return(0);
  }
  *fout << "/" << "/" << std::endl;
  *fout << "/" << "/\t" << lnam << std::endl;
  *fout << "/" << "/" << std::endl;
  *fout << "  " << CTPTR << "->add(" << lvl << ","
    << count.get_level(lvl) << "," << (lvl ? count.get_level(lvl-1)-1 : 0)
      << ",\"" << nam << "\");" << std::endl;
  count.inc(lvl);
  lvl++;

  mem = typ->member;
  while (mem != NULL) {
    if (mem->array()) {
      *fout << "/" << "/" << std::endl;
      *fout << "/" << "/\t" << lnam << "." << mem->cname() << std::endl;
      *fout << "/" << "/" << std::endl;
      *fout << "  " << CTPTR << "->add(" << lvl << ","
	<< count.get_level(lvl) << "," << (lvl ? count.get_level(lvl-1)-1 : 0)
	  << ",\"." << mem->cname() << "\");" << std::endl;
      count.inc(lvl);
      for (arr = 0; arr < mem->array(); arr++) {
	sprintf(name,"%s.%s[%d]",lnam,mem->cname(),arr);
	Srekursion(fout,mem->type(),strrchr(name,'['),name,lvl+1, exp);
      }
    }
    else {
      sprintf(name,"%s.%s",lnam,mem->cname());
      Srekursion(fout,mem->type(),strrchr(name,'.'),name,lvl, exp);
    }
    mem = mem->next();
  }

  return(0);
}

int
PrintConf(std::ostream *fout, char *incl, char *incdir)
{
  *fout << "/" << "/" << std::endl;
  *fout << "/" << "/\toutput configuration (tar)" << std::endl;
  *fout << "/" << "/" << std::endl << std::endl;

  char *pwd = NULL;

  if (incdir) {
    if (!(pwd = getcwd((char *)NULL, MAXPATHLEN+2))) {
      perror(progname);
      return(errno);
    }
    if (chdir(incdir)) {
      perror(progname);
      return(errno);
    }
  }

  char *cpp_command = new char[strlen(GNUCPP)+strlen(incl)+5];
  sprintf(cpp_command, GNUCPP " -M %s", incl);
  char zeile[256];
  char *files = new char[4];
  files[0] = 0;
  FILE *cpp_in = popen(cpp_command, "r");
  while (fgets(zeile,255,cpp_in)) {
    char *file = index(zeile, ':');
    file = file ? file+1 : zeile;
    char *ch = rindex(file, '\\');
    if (ch) ch[0] = 0;
    ch = rindex(file, '\n');
    if (ch) ch[0] = 0;

    char *ftmp = new char[strlen(files)+strlen(file)+2];
    sprintf(ftmp, "%s %s", files, file);
    delete files;
    files = ftmp;
  }
  fclose(cpp_in);
  delete cpp_command;

  char *tar_command = new char[strlen(files)+16];
  sprintf(tar_command, "tar cfb - 1 %s", files);
  delete files;

  FILE *tar_inp = popen(tar_command, "r");
  int ch = 0;
  int i  = 0;
  *fout << "char " << CINDY << "Configuration[] = {" << std::endl << "  ";

  while (EOF != (ch = getc(tar_inp))) {
    if (i) {
      if (i%16)
	*fout << ",";
      else
	*fout << "," << std::endl << "  ";
    }
    fout->width(3);
    *fout << ch;
    ++i;
  }
  pclose(tar_inp);
  delete tar_command;
  *fout << std::endl << "};" << std::endl << std::endl;

  if (pwd) {
    if (chdir(pwd)) {
      perror(progname);
      return(errno);
    }
    free(pwd);
  }

  return i;
}

char *help_string[] =
{
  "\tCreate experiment configuration for the Cindy++ Analysis program.",
  "Options:",
  "  -C <dir>\tchange directory",
  "  -e <name>\tname of the experiment",
  "  -i <file>\tname of the input file",
  "  -n <name>\tcreate output configuration",
  "  -g <name>\tinclude file instead of input file",
  "  -d       \tdynamic allocation of data structure",
  "  -p <file>\tfilename: list of variables",
  "  -s <file>\tfilename: C++ structure definition",
  "  -x\t\tcreate output configuration",
  "",
  NULL
};
    
void
print_help()
{
  char **help;

  help = help_string;

  std::cerr << progname << ":" << std::endl << *help << std::endl;
  while (*(++help)) std::cerr << *help << std::endl;
}
